<?php
/**
 *
 * This file is part of Aura for PHP.
 *
 * @package Aura.Auth
 *
 * @license http://opensource.org/licenses/bsd-license.php BSD
 *
 */
namespace Aura\Auth\Adapter;

use Aura\Auth\Exception;
use Aura\Auth\Verifier\VerifierInterface;

/**
 *
 * Authenticate against a file generated by htpassword.
 *
 * Format for each line is "username:hashedpassword\n";
 *
 * Automatically checks against DES, SHA, and apr1-MD5.
 *
 * SECURITY NOTE: Default DES encryption will only check up to the first
 * 8 characters of a password; chars after 8 are ignored.  This means
 * that if the real password is "atechars", the word "atecharsnine" would
 * be valid.  This is bad.  As a workaround, if the password provided by
 * the user is longer than 8 characters, and DES encryption is being
 * used, this class will *not* validate it.
 *
 * @package Aura.Auth
 *
 */
class HtpasswdAdapter extends AbstractAdapter
{
    protected $file;

    protected $real;

    public function __construct($file, VerifierInterface $verifier)
    {
        $this->file = $file;
        $this->verifier = $verifier;
    }

    /**
     *
     * Verifies set of credentials.
     *
     * @param array $creds A list of credentials to verify
     *
     * @return mixed An array of verified user information, or boolean false
     * if verification failed.
     *
     */
    public function login($creds)
    {
        if (empty($creds['username'])) {
            $this->error = 'Username empty.';
            return false;
        }

        if (empty($creds['password'])) {
            $this->error = 'Password empty.';
            return false;
        }

        $username = $creds['username'];
        $password = $creds['password'];

        // force the full, real path to the file
        $real = realpath($this->file);
        if (! $real) {
            throw new Exception("File not found: '{$this->file}'");
        }

        // find the user's line in the file
        $fp = fopen($real, 'r');
        $len = strlen($username) + 1;
        $ok = false;
        while ($line = fgets($fp)) {
            if (substr($line, 0, $len) == "{$username}:") {
                // found the line, leave the loop
                $ok = true;
                break;
            }
        }

        // close the file
        fclose($fp);

        // did we find the username?
        if (! $ok) {
            $this->error = 'Credentials failed.';
            return false;
        }

        // break up the pieces: 0 = username, 1 = encrypted (hashed)
        // password. may be more than that but we don't care.
        $tmp = explode(':', trim($line));
        $encrypted = $tmp[1];

        $verified = $this->verifier->verify($password, $encrypted);

        if (! $verified) {
            $this->error = 'Incorrect password.';
            return false;
        }

        $this->name = $username;
        return true;
    }
}
